name: ReactToGitHubpages # This is the name of the workflow
on:
  push: # Triggers the workflow on push events to the repository
    branches:
      - main # Set the branch you want to deploy from
    paths-ignore: # Ignore changes to the specified paths
      - '.github/workflows/*' # Ignore changes to workflow files
      - 'README.md' # Ignore changes to the README file
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub Actions tab

jobs:
  Test: # This is the ID of the job
    runs-on: ubuntu-latest # Specifies the type of runner to use. The available runners are hosted by GitHub
    steps: # This section defines the steps that will be executed as part of the job
      - name: Get code
        uses: actions/checkout@v4 # Use the latest version of checkout action
      - name: Install node js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Print node version
        run: node -v
      - name: Cache dependencies for faster installs for node npm
        uses: actions/cache@v3
        with:
            path: ~/.npm # Cache the npm directory to speed up installs
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Create a unique key based on OS and hash of package-lock.json
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm run test
      - name: Build step
        run: echo "Build application..." # Replace this with your actual deployment commands
      - name: Build project
        run: npm run build
  Build: # This is the ID of the job
    runs-on: ubuntu-latest # Specifies the type of runner to use. The available runners are hosted by GitHub
    needs: Test # This job will only run if the 'test' job completes successfully
    steps: # This section defines the steps that will be executed as part of the job
      - name: Get code
        uses: actions/checkout@v4 # Use the latest version of checkout action
      - name: Install node js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Cache dependencies for faster installs for node npm
        uses: actions/cache@v3
        with:
          path: ~/.npm # Cache the npm directory to speed up installs
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Create a unique key based on OS and hash of package-lock.json
      - name: Install dependencies
        run: npm install
      - name: Build Message
        run: echo "build started..." # Replace this with your actual build commands
      - name: Build project
        run: npm run build
      - name: Upload build artifact # Upload the build artifacts for use in other jobs
        uses: actions/upload-artifact@v4 # Use the latest version of upload-artifact action
        with:
          name: dist-package # Name of the artifact
          path: dist/ # Path to the build directory
      - name: Build Complete
        run: echo "Build complete!" # Replace this with your actual build commands
            
  Deploy: # This is the ID of the job
    runs-on: ubuntu-latest # Specifies the type of runner to use. The available runners are hosted by GitHub
    needs: Build # This job will only run if the 'Build' job completes successfully
    steps: # This section defines the steps that will be executed as part of the job
      - name: Download the artifact
        uses: actions/download-artifact@v4 # Use the latest version of download-artifact
        with:
          name: dist-package # Name of the artifact to download
      - name: Deploy artifact using deploy pages action
        uses: JamesIves/github-pages-deploy-action@v4.4.0 # Use the GitHub Pages deploy action
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: dist-package # The folder the action should deploy.
          clean: true # Clean the target branch before deploying.
          token: ${{ secrets.GITHUB_TOKEN }} # GitHub automatically creates this secret to use in your workflow.
      - name: Deploy Complete
        run: echo "Deploy complete!" # Replace this with your actual deployment commands    
           